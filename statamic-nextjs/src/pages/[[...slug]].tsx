import Head from "next/head";
import styles from "@foundation/ui/styles/Home.module.css";
import { request, gql, GraphQLClient } from "graphql-request";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";

type Props = any;

const Home: NextPage<Props> = ({ entry }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{entry?.title}</h1>

        <p className={styles.description}>
          ...then we have access to Statamic!
        </p>
      </main>
    </div>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const funnyQuery = gql`
    {
      entries(filter: { url: { isnt: null } }) {
        data {
          title
          url
        }
      }
    }
  `;

  const client = new GraphQLClient(
    "https://www.headless-5cj5jmy-br3bvmw5mdtds.de-2.platformsh.site/graphql",
    { errorPolicy: "ignore" }
  );

  const response = await client.request(funnyQuery);

  const entries = response.entries.data;

  const filteredEntries = entries.filter((entry: any) => entry);

  const slugs = filteredEntries.map((entry: any) => {
    const arr = entry.url.split("/");
    arr.shift();

    return {
      params: {
        slug: arr,
      },
    };
  });

  return {
    paths: slugs,
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const { slug } = params ?? {};

  if (!slug) {
    return {
      notFound: true,
    };
  }

  const uri = typeof slug === "string" ? slug : slug.join("/");

  const pageQuery = gql`
    {
      entry(uri: "/${uri}") {
        title
        url
      }
    }
  `;

  const response = await request(
    "https://www.headless-5cj5jmy-br3bvmw5mdtds.de-2.platformsh.site/graphql",
    pageQuery
  );

  return {
    props: {
      entry: response.entry,
    },
    revalidate: 60,
  };
};

export default Home;
